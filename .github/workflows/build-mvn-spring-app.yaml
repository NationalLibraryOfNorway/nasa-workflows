name: Build mvn Spring app

on:
  workflow_call:
    secrets:
      VAULT_URL:
        required: true
      VAULT_SECRET_PATH:
        required: true
      VAULT_ROLE:
        required: true
      VAULT_ROLE_ID:
        required: true
      VAULT_SECRET_ID:
        required: true

    outputs:
      build-tag:
        description: "Build tag"
        value: ${{ jobs.build-app.outputs.release-version }}
    inputs:
      maven-image:
        required: true
        type: string
        description: Maven image to build with
      dev-replicas:
        required: false
        type: number
        default: 1
      prod-replicas:
        required: false
        type: number
        default: 1
      service-name:
        required: true
        type: string
        description: Name of the service
      deploy-e2e:
        required: false
        type: boolean
        default: false

jobs:
  test:
    name: Build and Run test
    runs-on: self-hosted-linux
    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    container:
      image: ${{ inputs.maven-image }}
      options: --user root
    env:
      TZ: "Europe/Oslo"
    steps:
      - name: Import secrets from vault
        uses: hashicorp/vault-action@v3
        id: vault
        with:
          url: ${{ secrets.VAULT_URL }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: ${{ secrets.VAULT_SECRET_PATH}} *

      - name: Checkout code
        uses: actions/checkout@v4
        # checkout gir shallow copy - fetch-depth: 0 vil tilgjengeliggjøre tags
        with:
          fetch-depth: 0
      - name: set env
        run: |
          echo "NVD_REPO=${{ env.NVD_REPO }}" >> $GITHUB_ENV
          echo "ARTIFACTORY_USER=${{ env.ARTIFACTORY_USER }}" >> $GITHUB_ENV
          echo "ARTIFACTORY_PASS=${{ env.ARTIFACTORY_PASS }}" >> $GITHUB_ENV
          echo "ARTIFACTORY_NB=${{ env.ARTIFACTORY_REPO_HOST }}" >> $GITHUB_ENV
          echo "PROXY_HOST_NB=${{ env.PROXY_NB_HOST }}" >> $GITHUB_ENV
          echo "PROXY_PORT_NB=${{ env.PROXY_NB_PORT }}" >> $GITHUB_ENV
          echo "PROXY_NB=${{ secrets.PROXY_NB }}" >> $GITHUB_ENV

      - name: Generate ~/.m2/repository cache key
        id: m2-cache-key
        run: echo "keyname=$(date +'maven-week-%U')" >> $GITHUB_OUTPUT

      - name: Cache ~/.m2/repository
        id: cache-m2-repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ steps.m2-cache-key.outputs.keyname }}

      - name: Create m2-settings
        uses: NationalLibraryOfNorway/nasa-workflows/.github/action/maven-settings@main
        with:
          artifactory-host: ${{ env.ARTIFACTORY_NB }}
          artifactory-user-nasa: ${{ env.ARTIFACTORY_USER }}
          artifactory-pass-nasa: ${{ env.ARTIFACTORY_PASS }}
          proxy-host-nb: ${{ env.PROXY_HOST_NB }}
          proxy-port-nb: ${{ env.PROXY_PORT_NB }}

      - name: Maven test
        run: mvn -s settings.xml --global-toolchains toolchains.xml --no-transfer-progress --batch-mode --update-snapshots verify

      - name: Fix dubious ownership in git-repo
        shell: bash
        run: |
          git config --global --add safe.directory '*'

      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: JUnit Tests
          path: ./**/TEST-*.xml
          reporter: java-junit
          fail-on-error: true
          fail-on-empty: true

  build-publish-app:
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    name: Build and publish docker image
    runs-on: self-hosted-linux
    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    container:
      image: ${{ inputs.maven-image }}
      options: --user root
    outputs:
      build-tag: ${{ steps.generate-build-tag.outputs.build-tag }}
    env:
      TZ: "Europe/Oslo"
    steps:
      - name: Import secrets from vault
        uses: hashicorp/vault-action@v3
        id: vault
        with:
          url: ${{ secrets.VAULT_URL }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: ${{ secrets.VAULT_SECRET_PATH}} *


      # prebuild
      - name: Checkout code
        uses: actions/checkout@v4
        # checkout gir shallow copy - fetch-depth: 0 vil tilgjengeliggjøre tags
        with:
          fetch-depth: 0

      - name: set env
        run: |
          echo "PROXY_NB=${{ secrets.PROXY_NB }}" >> $GITHUB_ENV
          echo "PROXY_HOST_NB=${{ env.PROXY_NB_HOST }}" >> $GITHUB_ENV
          echo "PROXY_PORT_NB=${{ env.PROXY_NB_PORT }}" >> $GITHUB_ENV
          echo "DOCKER_REGISTRY_NB=${{ env.DOCKER_REGISTRY_NB }}" >> $GITHUB_ENV
          echo "DOCKER_HARBOR_USER=${{ env.DOCKER_HARBOR_USER }}" >> $GITHUB_ENV
          echo "DOCKER_HARBOR_PASS=${{ env.DOCKER_HARBOR_PASS }}" >> $GITHUB_ENV
          echo "NVD_REPO=${{ env.NVD_REPO }}" >> $GITHUB_ENV
          echo "ARTIFACTORY_USER=${{ env.ARTIFACTORY_USER }}" >> $GITHUB_ENV
          echo "ARTIFACTORY_PASS=${{ env.ARTIFACTORY_PASS }}" >> $GITHUB_ENV
          echo "ARTIFACTORY_NB=${{ env.ARTIFACTORY_REPO_HOST }}" >> $GITHUB_ENV

      - name: Generate ~/.m2/repository cache key
        id: m2-cache-key
        run: echo "keyname=$(date +'maven-week-%U')" >> $GITHUB_OUTPUT

      - name: Cache ~/.m2/repository
        id: cache-m2-repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ steps.m2-cache-key.outputs.keyname }}

      - name: Create m2-settings
        uses: NationalLibraryOfNorway/nasa-workflows/.github/action/maven-settings@main
        with:
          artifactory-host: ${{ env.ARTIFACTORY_NB }}
          artifactory-user-nasa: ${{ env.ARTIFACTORY_USER }}
          artifactory-pass-nasa: ${{ env.ARTIFACTORY_PASS }}
          proxy-host-nb: ${{ env.PROXY_HOST_NB }}
          proxy-port-nb: ${{ env.PROXY_PORT_NB }}

      - name: Generate build tag
        id: generate-build-tag
        run: |
          export MAVEN_VERSION=`mvn -s settings.xml --global-toolchains toolchains.xml --batch-mode --no-transfer-progress -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec | grep -o '[0-9]*\.[0-9]*\.[0-9]*'`
          export BUILD_TAG=${MAVEN_VERSION}-${{ github.run_number }}
          echo "Setting Build tag $BUILD_TAG"
          echo "build-tag=$(echo $BUILD_TAG)" >> $GITHUB_OUTPUT
          echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_ENV

      # maven build
      - name: Set maven artifact version
        run: |
          mvn -s settings.xml --global-toolchains toolchains.xml --no-transfer-progress versions:set -DnewVersion="${{ steps.generate-build-tag.outputs.build-tag }}"
          mvn -s settings.xml --global-toolchains toolchains.xml --no-transfer-progress versions:commit

      - name: Build with Maven # --global-toolchains toolchains.xml
        run: mvn -s settings.xml --global-toolchains toolchains.xml --no-transfer-progress --batch-mode --update-snapshots -Dmaven.test.skip=true -Ddependency-check.skip=true package

       #Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#      - name: Update dependency graph
#        uses: advanced-security/maven-dependency-submission-action@v4.1.1
#        with:
#          settings-file: settings.xml
#          maven-args: --no-transfer-progress -Dhttps.proxyHost=${{ env.PROXY_HOST_NB }} -Dhttps.proxyPort=${{ env.PROXY_PORT_NB }} -Dhttp.proxyHost=${{ env.PROXY_HOST_NB }} -Dhttp.proxyPort=${{ env.PROXY_PORT_NB }} -Dhttp.nonProxyHosts=localhost|127.0.0.1|docker

      # publish artifacts
      - name: Publish artifacts
        run: |
          mvn -s settings.xml --global-toolchains toolchains.xml --no-transfer-progress -Dmaven.test.skip=true -Ddependency-check.skip=true deploy

      # docker build
      - name: Build docker image
        run: | # 
          export DOCKER_POM=`grep -ril "publishRegistry" --include pom.xml`
          if [ $DOCKER_POM ]; then mvn -s settings.xml --global-toolchains toolchains.xml --no-transfer-progress -f $DOCKER_POM spring-boot:build-image -Dmaven.test.skip=true -Ddependency-check.skip=true -Dspring-boot.build-image.publish=true; fi

  deploy-stage:
    name: Deploy to stage
    needs: build-publish-app
    runs-on: self-hosted-linux
    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    container:
      image: dtzar/helm-kubectl
      options: --user root
    steps:
      - name: Import secrets from vault
        uses: hashicorp/vault-action@v3
        id: vault
        with:
          url: ${{ secrets.VAULT_URL }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: ${{ secrets.VAULT_SECRET_PATH}} *

      - name: set env
        run: |
          echo "K8S_SERVER=${{ env.K8S_STAGE_SERVER }}" >> $GITHUB_ENV
          echo "K8S_CERTIFICATE_AUTHORITY_DATA=${{ env.K8S_STAGE_CERTIFICATE_AUTHORITY_DATA }}" >> $GITHUB_ENV
          echo "K8S_USER_TOKEN=${{ env.K8S_STAGE_USER_TOKEN }}" >> $GITHUB_ENV
          echo "K8S_USER=${{ env.K8S_USER }}" >> $GITHUB_ENV

      - name: Deploy stage
        run: |
          export K8S_CONTEXT=nbno
          export SERVICE_NAME=${{ inputs.service-name }}
          export RELEASE_VERSION=${{ env.BUILD_TAG }}
          export SPRING_PROFILES='dockere2e\,e2e\,auaue2e'
          export REPLICAS=${{ inputs.dev-replicas }}
          
          echo "Deploying service ${SERVICE_NAME} with tag: ${build-tag} to stage with replicas: ${REPLICAS}"
          
          kubectl config set-cluster k8s --server="${env.K8S_SERVER}"
          kubectl config set clusters.k8s.certificate-authority-data ${env.K8S_CERTIFICATE_AUTHORITY_DATA}
          kubectl config set-credentials ${env.K8S_USER} --token="${env.K8S_USER_TOKEN}"
          kubectl config set-context ${K8S_CONTEXT} --cluster=k8s --user=${env.K8S_USER}
          kubectl config use-context ${K8S_CONTEXT}
          helm repo add chartmuseum https://tools.nb.no/chartmuseum/
          helm repo update
          helm -n ${K8S_CONTEXT} upgrade --install --wait --wait-for-jobs ${SERVICE_NAME} chartmuseum/${SERVICE_NAME} --version ${RELEASE_VERSION} --set serviceAccount.name=${K8S_CONTEXT}  --set replicaCount=${REPLICAS:-1} --set-string springProfilesActive=${SPRING_PROFILES}

  deploy-e2e:
    name: Deploy to e2e
    needs: build-publish-app
    if: ${{ inputs.deploy-e2e }}
    runs-on: self-hosted-linux
    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    container:
      image: dtzar/helm-kubectl
      options: --user root
    steps:
      - name: Import secrets from vault
        uses: hashicorp/vault-action@v3
        id: vault
        with:
          url: ${{ secrets.VAULT_URL }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: ${{ secrets.VAULT_SECRET_PATH}} *

      - name: set env
        run: |
          echo "K8S_SERVER=${{ env.K8S_STAGE_SERVER }}" >> $GITHUB_ENV
          echo "K8S_CERTIFICATE_AUTHORITY_DATA=${{ env.K8S_STAGE_CERTIFICATE_AUTHORITY_DATA }}" >> $GITHUB_ENV
          echo "K8S_USER_TOKEN=${{ env.K8S_STAGE_USER_TOKEN }}" >> $GITHUB_ENV
          echo "K8S_USER=${{ env.K8S_USER }}" >> $GITHUB_ENV

      - name: Deploy e2e
        run: |
          export K8S_CONTEXT=e2e
          export SERVICE_NAME=${{ inputs.service-name }}
          export RELEASE_VERSION=${{ env.BUILD_TAG }}
          export SPRING_PROFILES='dockere2e\,e2e\,auaue2e'
          export REPLICAS=1
          
          echo "Deploying service ${SERVICE_NAME} with tag: ${build-tag} to e2e with replicas: ${REPLICAS}"
          
          kubectl config set-cluster k8s --server="${env.K8S_SERVER}"
          kubectl config set clusters.k8s.certificate-authority-data ${env.K8S_CERTIFICATE_AUTHORITY_DATA}
          kubectl config set-credentials ${env.K8S_USER} --token="${env.K8S_USER_TOKEN}"
          kubectl config set-context ${K8S_CONTEXT} --cluster=k8s --user=${env.K8S_USER}
          kubectl config use-context ${K8S_CONTEXT}
          helm repo add chartmuseum https://tools.nb.no/chartmuseum/
          helm repo update
          helm -n ${K8S_CONTEXT} upgrade --install --wait --wait-for-jobs ${SERVICE_NAME} chartmuseum/${SERVICE_NAME} --version ${RELEASE_VERSION} --set serviceAccount.name=${K8S_CONTEXT}  --set replicaCount=${REPLICAS:-1} --set-string springProfilesActive=${SPRING_PROFILES}

